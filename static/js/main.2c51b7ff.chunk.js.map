{"version":3,"sources":["components/mapBackground/index.jsx","components/input/index.jsx","components/forecastCard/utils.js","components/forecastCard/index.jsx","views/home/renderForecastCards.jsx","services/openweather/index.js","modules/forecast/index.js","views/home/utils.js","views/home/index.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledMap","styled","Map","CoverLayer","div","MapBackground","lat","lon","rest","position","Fragment","center","animate","zoom","TileLayer","url","StyledTextField","TextField","Input","handleChange","useState","value","setValue","margin","placeholder","onChange","target","DAYS","StyledCard","Card","StyledHeader","Typography","Img","img","ImgMediaCard","key","timestamp","temp","pressure","tempMin","tempMax","humidity","seaLevel","groundLevel","icon","tempKf","CardActionArea","CardContent","gutterBottom","variant","component","toFixed","src","alt","color","CardActions","ms","date","Date","getDay","getDayOfTheWeek","MainContainer","AnimatedDiv","animated","CardsContainer","transitionConfig","from","opacity","transform","enter","leave","getFirstCityId","compose","get","head","getFirstTimestamp","getKey","forecasts","BASE_URL","fetchForecast","cityName","a","Error","axios","params","q","APPID","data","list","formatForecast","map","item","cityId","coords","dt","main","temp_min","temp_max","sea_level","grnd_level","temp_kf","weather","forecast","city","id","name","coord","dayCollapse","samples","values","reduce","b","groupBy","l","parseForecase","getCoords","setForecast","rawForecast","getForecast","debounce","Wrapper","InputContainer","Home","useForecast","setCity","items","setItems","transitions","useTransition","useEffect","props","style","cardProps","renderForecastCards","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c51b7ff.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Map, TileLayer } from \"react-leaflet\";\n\nconst StyledMap = styled(Map)`\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n  z-index: -1;\n  & .leaflet-control-container {\n    display: none;\n  }\n`;\n\nconst CoverLayer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  position: fixed;\n  background-image: radial-gradient(\n    rgba(255, 255, 255, 0.9),\n    rgba(255, 255, 255, 0.25)\n  );\n`;\n\nfunction MapBackground({ lat = 49.84, lon = -97.13, ...rest }) {\n  const position = [lat, lon];\n  return (\n    <React.Fragment>\n      <CoverLayer />\n      <StyledMap center={position} animate zoom={9} {...rest}>\n        <TileLayer url=\"https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png\" />\n      </StyledMap>\n    </React.Fragment>\n  );\n}\n\nexport default MapBackground;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst StyledTextField = styled(TextField)`\n  width: 100%;\n  & input {\n    text-align: center;\n  }\n`;\n\nexport default function Input({ handleChange, ...rest }) {\n  const [value, setValue] = useState(\"\");\n  return (\n    <StyledTextField\n      margin=\"normal\"\n      placeholder=\"Type a city\"\n      value={value}\n      onChange={({ target }) => {\n        setValue(target.value);\n        handleChange(target.value);\n      }}\n      {...rest}\n    />\n  );\n}\n","const DAYS = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\"\n];\n\nexport function getDayOfTheWeek(ms) {\n  const date = new Date(ms);\n  return DAYS[date.getDay()];\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { getDayOfTheWeek } from \"./utils\";\n\nconst StyledCard = styled(Card)`\n  max-width: 345;\n`;\n\nconst StyledHeader = styled(Typography)`\n  display: flex;\n  align-items: center;\n`;\n\nconst Img = styled.img`\n  opacity: 0.5;\n  filter: saturate(50%);\n`;\n\nexport default function ImgMediaCard({\n  key,\n  timestamp,\n  temp,\n  tempMin,\n  tempMax,\n  pressure,\n  seaLevel,\n  groundLevel,\n  humidity,\n  tempKf,\n  icon\n}) {\n  return (\n    <StyledCard>\n      <CardActionArea>\n        <CardContent>\n          <StyledHeader gutterBottom variant=\"h5\" component=\"h2\">\n            {temp.toFixed(0)} K\n            <Img src={icon} alt=\"weather icon\" />\n          </StyledHeader>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Humidity: {humidity.toFixed(2)} %\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Pressure: {pressure.toFixed(2)} hPa\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <span>{getDayOfTheWeek(timestamp)}</span>\n        </CardActions>\n      </CardActionArea>\n    </StyledCard>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport get from \"lodash/fp/get\";\nimport head from \"lodash/fp/head\";\nimport compose from \"lodash/fp/compose\";\nimport { useTransition, animated } from \"react-spring\";\nimport ForecastCard from \"../../components/forecastCard\";\n\nconst MainContainer = styled.div`\n  display: block;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nconst AnimatedDiv = styled(animated.div)`\n  position: absolute;\n  left: 0;\n  right: 0;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100vw;\n`;\n\nconst CardsContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0 10vw;\n`;\n\nconst transitionConfig = {\n  from: {\n    opacity: 0,\n    transform: \"translate3d(0, -40px, 0)\"\n  },\n  enter: {\n    opacity: 1,\n    transform: \"translate3d(0, 0px, 0)\"\n  },\n  leave: {\n    opacity: 0,\n    transform: \"translate3d(0, 40px, 0)\"\n  }\n};\n\nexport const getFirstCityId = compose([get(\"cityId\"), head]);\nexport const getFirstTimestamp = compose([get(\"timestamp\"), head]);\nexport const getKey = forecasts =>\n  `${getFirstCityId(forecasts)}${getFirstTimestamp(forecasts)}`;\n\nexport default function RenderForecastCards(forecast = []) {\n  const [items, setItems] = useState([]);\n  const transitions = useTransition(items, getKey, transitionConfig);\n  useEffect(() => {\n    setItems([forecast]);\n  }, [forecast]);\n\n  return (\n    <MainContainer>\n      {transitions.map(({ item, props, key }) => (\n        <AnimatedDiv key={key} style={props}>\n          <CardsContainer>\n            {item && item.map(cardProps => <ForecastCard {...cardProps} />)}\n          </CardsContainer>\n        </AnimatedDiv>\n      ))}\n    </MainContainer>\n  );\n}\n","import axios from \"axios\";\n\nconst BASE_URL = \"https://api.openweathermap.org\";\n\nexport async function fetchForecast(cityName) {\n  const url = `${BASE_URL}/data/2.5/forecast`;\n  try {\n    if (!cityName) throw Error(\"No city name\");\n    const { data } = await axios.get(url, {\n      params: {\n        q: cityName,\n        APPID: \"7b17e8b1a5bfc41d0a542e3b2b0508f0\"\n      }\n    });\n    return data;\n  } catch (err) {\n    return { list: [] };\n  }\n}\n","import map from \"lodash/fp/map\";\nimport values from \"lodash/fp/values\";\nimport reduce from \"lodash/fp/reduce\";\nimport groupBy from \"lodash/fp/groupBy\";\nimport compose from \"lodash/fp/compose\";\n\nexport const formatForecast = compose([\n  map(item => ({\n    cityId: item.cityId,\n    cityName: item.cityName,\n    coords: item.coords,\n    timestamp: item.dt * 1000,\n    temp: item.main.temp,\n    tempMin: item.main.temp_min,\n    tempMax: item.main.temp_max,\n    pressure: item.main.pressure,\n    seaLevel: item.main.sea_level,\n    groundLevel: item.main.grnd_level,\n    humidity: item.main.humidity,\n    tempKf: item.main.temp_kf,\n    icon: `http://openweathermap.org/img/w/${item.weather[0].icon}.png`\n  })),\n  forecast =>\n    map(\n      item => ({\n        ...item,\n        cityId: forecast.city.id,\n        cityName: forecast.city.name,\n        coords: forecast.city.coord\n      }),\n      forecast.list\n    )\n]);\n\nexport const _initItem = {\n  temp: 0,\n  tempMin: 0,\n  tempMax: 0,\n  pressure: 0,\n  seaLevel: 0,\n  groundLevel: 0,\n  humidity: 0,\n  tempKf: 0,\n  samples: 0\n};\n\nexport const divideBySamples = a => ({\n  ...a,\n  temp: a.temp / a.samples,\n  tempMin: a.tempMin / a.samples,\n  tempMax: a.tempMax / a.samples,\n  pressure: a.pressure / a.samples,\n  seaLevel: a.seaLevel / a.samples,\n  groundLevel: a.groundLevel / a.samples,\n  humidity: a.humidity / a.samples,\n  tempKf: a.tempKf / a.samples\n});\n\nexport const addForecasts = (a, b) => ({\n  ...b,\n  temp: a.temp + b.temp,\n  tempMin: a.tempMin + b.tempMin,\n  tempMax: a.tempMax + b.tempMax,\n  pressure: a.pressure + b.pressure,\n  seaLevel: a.seaLevel + b.seaLevel,\n  groundLevel: a.groundLevel + b.groundLevel,\n  humidity: a.humidity + b.humidity,\n  tempKf: a.tempKf + b.tempKf,\n  samples: a.samples + 1\n});\n\nexport const dayCollapse = compose([\n  map(divideBySamples),\n  values,\n  map(reduce(addForecasts, _initItem)),\n  groupBy(l => new Date(l.timestamp).getDay())\n]);\n\nexport const parseForecase = compose([dayCollapse, formatForecast]);\n","import { useState } from \"react\";\nimport get from \"lodash/fp/get\";\nimport debounce from \"lodash/debounce\";\nimport { fetchForecast } from \"../../services/openweather\";\nimport { parseForecase } from \"../../modules/forecast\";\n\nexport const getCoords = get(\"[0].coords\");\n\nexport async function _getForecast(cityName, setForecast) {\n  const rawForecast = await fetchForecast(cityName);\n  const forecast = parseForecase(rawForecast);\n  setForecast(forecast);\n}\n\nconst getForecast = debounce(_getForecast, 500);\n\nexport function useForecast() {\n  const [forecast, setForecast] = useState([]);\n\n  function setCity(cityName) {\n    getForecast(cityName, setForecast);\n  }\n\n  return [forecast, setCity];\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport MapBackground from \"../../components/mapBackground\";\nimport Input from \"../../components/input\";\nimport renderForecastCards from \"./renderForecastCards\";\nimport { useForecast, getCoords } from \"./utils\";\n\nconst Wrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst InputContainer = styled.div`\n  width: 300px;\n`;\n\nfunction Home() {\n  const [forecast, setCity] = useForecast();\n  return (\n    <Wrapper>\n      <MapBackground {...getCoords(forecast)} />\n      <InputContainer>\n        <Input handleChange={setCity} />\n      </InputContainer>\n      {renderForecastCards(forecast)}\n    </Wrapper>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport Home from \"./views/home\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}